Gist ID: 79fc4e3c4e28a4dbfc56344db21345f4
Description: 

File: App.config
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
</configuration>

==================================================

File: Markup.addin
<?xml version="1.0" encoding="utf-8"?>
<RevitAddIns>
	<AddIn Type="Application">
		<Name>MarkupAddin</Name>
		<Assembly>Markup.dll</Assembly>
		<AddInId>77314aa0-29f5-4da6-abb4-1912d8a17320</AddInId>
		<FullClassName>MarkupAddin.MarkupAddin</FullClassName>
		<VendorId>YourCompany</VendorId>
		<VendorDescription>YourCompany Add-ins</VendorDescription>
	</AddIn>
</RevitAddIns>

==================================================

File: MarkupAddin.cs
using Autodesk.Revit.UI;
using Autodesk.Revit.DB;
using Autodesk.Revit.Attributes;
using System;
using System.Reflection;

namespace MarkupAddin
{
    [Transaction(TransactionMode.Manual)]
    public class MarkupAddin : IExternalApplication
    {
        public Result OnStartup(UIControlledApplication application)
        {
            try
            {
                // Create a custom ribbon tab
                application.CreateRibbonTab("Playground");

                // Create a custom ribbon panel
                RibbonPanel ribbonPanel = application.CreateRibbonPanel("Playground", "Ideas");

                // Create a push button
                PushButtonData pushButtonData = new PushButtonData("Markup", "Markup", Assembly.GetExecutingAssembly().Location, "MarkupAddin.MarkupCommand");
                PushButton markupButton = ribbonPanel.AddItem(pushButtonData) as PushButton;

                return Result.Succeeded;
            }
            catch (Exception ex)
            {
                TaskDialog.Show("Error", ex.Message);
                return Result.Failed;
            }
        }

        public Result OnShutdown(UIControlledApplication application)
        {
            return Result.Succeeded;
        }
    }
}

==================================================

File: MarkupCommand.cs
using Autodesk.Revit.UI;
using Autodesk.Revit.DB;
using Autodesk.Revit.Attributes;
using System;
using System.Windows.Forms;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.IO;
using DrawingColor = System.Drawing.Color;
using DrawingRectangle = System.Drawing.Rectangle;
using DrawingPoint = System.Drawing.Point;
using System.Security.Principal;
using System.Diagnostics;
using NLog;

namespace MarkupAddin
{
    [Transaction(TransactionMode.Manual)]
    public class MarkupCommand : IExternalCommand
    {
        private DrawingPoint lastPoint;
        private bool isDrawing;
        private readonly string logFilePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), "MarkupAddin.log");
        private static readonly Logger Logger = LogManager.GetCurrentClassLogger();

        public Result Execute(ExternalCommandData commandData, ref string message, ElementSet elements)
        {
            UIApplication uiapp = commandData.Application;
            UIDocument uidoc = uiapp.ActiveUIDocument;
            Document doc = uidoc.Document;

            try
            {
                PerformSystemChecks();
                Autodesk.Revit.DB.View activeView = doc.ActiveView;

                if (activeView == null)
                {
                    LogError(new Exception("ActiveView is null"), commandData, doc, "Null check failed", true);
                    return Result.Failed;
                }

                Bitmap bitmap = ExportImageUsingRevitAPI(doc, activeView);
                if (bitmap == null)
                {
                    throw new Exception("Failed to capture the view image.");
                }

                using (Graphics graphics = Graphics.FromImage(bitmap))
                {
                    using (SolidBrush brush = new SolidBrush(DrawingColor.FromArgb(128, 255, 255, 0)))
                    {
                        graphics.FillRectangle(brush, new DrawingRectangle(0, 0, bitmap.Width, bitmap.Height));
                    }
                }

                using (System.Windows.Forms.Form form = new System.Windows.Forms.Form())
                {
                    form.BackgroundImage = bitmap;
                    form.MouseDown += (sender, e) =>
                    {
                        if (e.Button == MouseButtons.Left)
                        {
                            lastPoint = e.Location;
                            isDrawing = true;
                        }
                    };
                    form.MouseMove += (sender, e) =>
                    {
                        try
                        {
                            if (isDrawing && e.Button == MouseButtons.Left)
                            {
                                using (Graphics graphics = form.CreateGraphics())
                                {
                                    using (Pen pen = new Pen(DrawingColor.Red, 2))
                                    {
                                        graphics.DrawLine(pen, lastPoint, e.Location);
                                        lastPoint = e.Location;
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            LogError(ex, null, null, "Error in MouseMove event", false);
                        }
                    };
                    form.MouseUp += (sender, e) =>
                    {
                        if (e.Button == MouseButtons.Left)
                        {
                            isDrawing = false;
                        }
                    };
                    form.KeyDown += (sender, e) =>
                    {
                        if (e.KeyCode == Keys.Escape)
                        {
                            form.Close();
                        }
                    };
                    form.ShowDialog();
                }

                SaveFileDialog saveFileDialog = new SaveFileDialog
                {
                    Filter = "PNG Image|*.png"
                };
                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    try
                    {
                        bitmap.Save(saveFileDialog.FileName);
                        try
                        {
                            Clipboard.SetImage(bitmap);
                        }
                        catch (Exception clipboardEx)
                        {
                            LogError(clipboardEx, commandData, doc, "Failed to copy image to clipboard", true);
                        }
                        TaskDialog.Show("Success", "Image saved successfully. The image has also been copied to the clipboard.");
                    }
                    catch (Exception saveEx)
                    {
                        LogError(saveEx, commandData, doc, "Failed to save image", true);
                        TaskDialog.Show("Error", "Failed to save the image. Please check the log file.");
                    }
                }
                return Result.Succeeded;
            }
            catch (Exception ex)
            {
                LogError(ex, commandData, doc, "An error occurred", true);
                message = ex.Message;
                TaskDialog.Show("Error", $"An error occurred. Please check the log file at:\n{logFilePath}");
                return Result.Failed;
            }
        }

        private Bitmap ExportImageUsingRevitAPI(Document doc, Autodesk.Revit.DB.View view)
        {
            try
            {
                if (!view.CanBePrinted)
                {
                    throw new InvalidOperationException("The current view cannot be exported as an image.");
                }

                string tempDir = Path.Combine(Path.GetTempPath(), "RevitExport_" + Guid.NewGuid().ToString());
                Directory.CreateDirectory(tempDir);
                string fileName = "TempRevitExport.png";
                string tempImagePath = Path.Combine(tempDir, fileName);

                ImageExportOptions imgOptions = new ImageExportOptions
                {
                    ZoomType = ZoomFitType.FitToPage,
                    PixelSize = 2048,
                    ImageResolution = ImageResolution.DPI_150,
                    FitDirection = FitDirectionType.Horizontal,
                    ExportRange = ExportRange.VisibleRegionOfCurrentView,
                    FilePath = tempImagePath,
                    HLRandWFViewsFileType = ImageFileType.PNG
                };
                doc.ExportImage(imgOptions);

                int timeoutMs = 10000; // 10 seconds timeout
                int sleepIntervalMs = 100;
                Stopwatch sw = Stopwatch.StartNew();
                while (!File.Exists(tempImagePath) && sw.ElapsedMilliseconds < timeoutMs)
                {
                    System.Threading.Thread.Sleep(sleepIntervalMs);
                }

                if (File.Exists(tempImagePath))
                {
                    Bitmap bitmap = new Bitmap(tempImagePath);
                    File.Delete(tempImagePath);
                    Directory.Delete(tempDir, true);
                    return bitmap;
                }

                throw new Exception($"Image export failed. File not created at {tempImagePath} within {timeoutMs}ms");
            }
            catch (Exception ex)
            {
                LogError(ex, null, doc, "Error in ExportImageUsingRevitAPI", true);
                throw;
            }
        }

        private void PerformSystemChecks()
        {
            try
            {
                string testFile = Path.Combine(Path.GetTempPath(), "test.txt");
                File.WriteAllText(testFile, "Test");
                File.Delete(testFile);
                LogInfo("Write permission check: Passed");
            }
            catch (Exception ex)
            {
                LogError(ex, null, null, "Write permission check: Failed", false);
            }

            try
            {
                DriveInfo drive = new DriveInfo(Path.GetTempPath());
                long freeSpace = drive.AvailableFreeSpace;
                LogInfo($"Available disk space: {freeSpace / (1024 * 1024)} MB");
            }
            catch (Exception ex)
            {
                LogError(ex, null, null, "Disk space check: Failed", false);
            }

            try
            {
                WindowsIdentity identity = WindowsIdentity.GetCurrent();
                WindowsPrincipal principal = new WindowsPrincipal(identity);
                bool isAdmin = principal.IsInRole(WindowsBuiltInRole.Administrator);
                LogInfo($"Running with elevated privileges: {isAdmin}");
            }
            catch (Exception ex)
            {
                LogError(ex, null, null, "Privilege check: Failed", false);
            }
        }

        private void LogError(Exception ex, ExternalCommandData commandData, Document doc, string context, bool includeRevitInfo)
        {
            Logger.Error($"Error: {context}");
            Logger.Error($"Message: {ex.Message}");
            Logger.Error($"Stack Trace: {ex.StackTrace}");
            if (includeRevitInfo && commandData != null && doc != null)
            {
                Logger.Error($"Revit Version: {commandData.Application.Application.VersionNumber}");
                Logger.Error($"Document Path: {doc.PathName}");
                Logger.Error($"Active View: {doc.ActiveView.Name}");
                Logger.Error($"View Type: {doc.ActiveView.ViewType}");
                Logger.Error($"View Scale: {doc.ActiveView.Scale}");
            }
            Logger.Error($"OS Version: {Environment.OSVersion}");
            Logger.Error($"64-bit OS: {Environment.Is64BitOperatingSystem}");
            Logger.Error($"Machine Name: {Environment.MachineName}");
        }

        private void LogInfo(string message)
        {
            Logger.Info(message);
        }
    }
}


==================================================

File: NLog.config
<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Warn"
      internalLogFile="c:\temp\nlog-internal.log">

	<!-- Define targets -->
	<targets>
		<target xsi:type="File" name="file" fileName="c:\temp\logfile.log" />
		<target xsi:type="Console" name="console" layout="${longdate}|${level:uppercase=true}|${logger}|${message}" />
	</targets>

	<!-- Define rules -->
	<rules>
		<logger name="*" minlevel="Info" writeTo="file,console" />
	</rules>
</nlog>

==================================================

File: packages.config
<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="Newtonsoft.Json" version="13.0.3" targetFramework="net48" />
  <package id="NLog" version="5.3.2" targetFramework="net48" />
  <package id="NLog.Config" version="4.7.15" targetFramework="net48" />
  <package id="NLog.Schema" version="4.7.15" targetFramework="net48" />
</packages>

==================================================

